/*
 * LogSentinel RESTful API
 * Read more at https://logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.client;

import java.util.List;

import com.logsentinel.ApiException;
import com.logsentinel.client.model.AuditLogEntry;
import com.logsentinel.client.model.LogResponse;
import com.logsentinel.client.model.Verification;

import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for AuditLogControllerApi
 */
@Ignore
public class AuditLogControllerApiTest {

    private final AuditLogControllerApi api = new AuditLogControllerApi();

    
    /**
     * Log an authentication event with the option to pass actor public key and signature
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logAuthActionTest() throws ApiException {
        String actorId = null;
        String authAction = null;
        String details = null;
        String applicationId = null;
        String userId = null;
        String authorization = null;
        String signedLoginChallenge = null;
        String userPublicKey = null;
        String actorDisplayName = null;
        String actorRole = null;
        LogResponse response = api.logAuthAction(actorId, authAction, details, applicationId, userId, authorization, signedLoginChallenge, userPublicKey, actorDisplayName, actorRole);

        // TODO: test validations
    }
    
    /**
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logSimpleTest() throws ApiException {
        String details = null;
        String applicationId = null;
        String authorization = null;
        LogResponse response = api.logSimple(details, applicationId, authorization);

        // TODO: test validations
    }
    
    /**
     * Log an event by providing full details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logStandardActionTest() throws ApiException {
        String actorId = null;
        String action = null;
        String entityType = null;
        String entityId = null;
        String details = null;
        String applicationId = null;
        String authorization = null;
        String actorDisplayName = null;
        String actorRole = null;
        LogResponse response = api.logStandardAction(actorId, action, entityType, entityId, details, applicationId, authorization, actorDisplayName, actorRole);

        // TODO: test validations
    }
    
    /**
     * Log an event by a given actor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logTest() throws ApiException {
        String actorId = null;
        String action = null;
        String details = null;
        String applicationId = null;
        String authorization = null;
        String actorDisplayName = null;
        String actorRole = null;
        LogResponse response = api.log(actorId, action, details, applicationId, authorization, actorDisplayName, actorRole);

        // TODO: test validations
    }
    
    /**
     * Search logged entries
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchUsingGETTest() throws ApiException {
        String query = null;
        Long startTime = null;
        Long endTime = null;
        Integer page = null;
        Integer pageSize = null;
        String applicationId = null;
        String authorization = null;
        List<AuditLogEntry> response = api.searchUsingGET(query, startTime, endTime, page, pageSize, applicationId, authorization);

        // TODO: test validations
    }
    
    /**
     * Verify whether a given hash is present, indicating that the log is intact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyTest() throws ApiException {
        String hash = null;
        String applicationId = null;
        String authorization = null;
        Verification response = api.verify(hash, applicationId, authorization);

        // TODO: test validations
    }
    
}
