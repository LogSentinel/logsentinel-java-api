/*
 * LogSentinel RESTful API
 * Read more at https://logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.client;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import com.google.gson.reflect.TypeToken;
import com.logsentinel.ApiCallback;
import com.logsentinel.ApiClient;
import com.logsentinel.ApiException;
import com.logsentinel.ApiResponse;
import com.logsentinel.BodySerializer;
import com.logsentinel.BodySigner;
import com.logsentinel.Configuration;
import com.logsentinel.JsonBodySerializer;
import com.logsentinel.Pair;
import com.logsentinel.ProgressRequestBody;
import com.logsentinel.ProgressResponseBody;
import com.logsentinel.client.model.ActionData;
import com.logsentinel.client.model.ActorData;
import com.squareup.okhttp.Call;
import com.squareup.okhttp.Interceptor;
import com.squareup.okhttp.Response;

public class HashControllerApi {
    private ApiClient apiClient;
    private BodySerializer bodySerializer;
    private BodySigner bodySigner;
    private String contentType;
    
    public HashControllerApi() {
        this(Configuration.getDefaultApiClient(), new JsonBodySerializer(Configuration.getDefaultApiClient().getJSON()), null, "application/json");
    }

    public HashControllerApi(ApiClient apiClient, BodySerializer bodySerializer, BodySigner signer, String contentType) {
        this.apiClient = apiClient;
        this.bodySerializer = bodySerializer;
        this.bodySigner = signer;
        this.contentType = contentType;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getHashableContentForAuthAction */
    private <T> Call getHashableContentForAuthActionCall(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        String localVarPostBody = preProcessBody(actionData);
        
        // create path and map variables
        String localVarPath = "/api/getHashableContent/{actorId}/auth/{authAction}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorData.getActorId()))
        .replaceAll("\\{" + "authAction" + "\\}", apiClient.escapeString(actionData.getAction()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        
        setDefaultParams(actorData, localVarQueryParams);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        signedLoginChallenge.ifPresent(param -> localVarHeaderParams.put("Signed-Login-Challenge", apiClient.parameterToString(signedLoginChallenge)));
        userPublicKey.ifPresent(param -> localVarHeaderParams.put("User-Public-Key", apiClient.parameterToString(param)));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);

        setDefaultHeaders(actionData, localVarPostBody, localVarHeaderParams);
        
        setProgressListener(progressListener);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private void setDefaultParams(ActorData actorData, List<Pair> localVarQueryParams) {
        if (actorData.getActorDisplayName() != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorDisplayName", actorData.getActorDisplayName()));
        if (actorData.getActorRoles() != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorRoles", actorData.getActorRoles()));
    }
    
    private <T> Call getHashableContentForAuthActionValidateBeforeCall(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorData.getActorId() == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling getHashableContentForAuthAction(Async)");
        }
        
        // verify the required parameter 'authAction' is set
        if (actionData.getAction() == null) {
            throw new ApiException("Missing the required parameter 'authAction' when calling getHashableContentForAuthAction(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (actionData.getDetails() == null) {
            throw new ApiException("Missing the required parameter 'details' when calling getHashableContentForAuthAction(Async)");
        }
        
        Call call = getHashableContentForAuthActionCall(actorData, actionData, signedLoginChallenge, userPublicKey, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Get the hash of a request for auth actions
     *
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * 
     * @return String hash
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> String getHashableContentForAuthAction(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey) throws ApiException {
        ApiResponse<String> resp = getHashableContentForAuthActionWithHttpInfo(actorData, actionData, signedLoginChallenge, userPublicKey);
        return resp.getData();
    }

    /**
     * Get the hash of a request for auth actions
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> ApiResponse<String> getHashableContentForAuthActionWithHttpInfo(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey) throws ApiException {
        Call call = getHashableContentForAuthActionValidateBeforeCall(actorData, actionData, signedLoginChallenge, userPublicKey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the hash of a request for auth actions (asynchronously)
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @param callback The callback to be executed when the API call finishes
     * 
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public <T> Call getHashableContentForAuthActionAsync(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = getHashableContentForAuthActionValidateBeforeCall(actorData, actionData, signedLoginChallenge, userPublicKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHashableContentForStandardAction */
    private <T> Call getHashableContentCall(ActorData actorData, ActionData<T> actionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        String localVarPostBody = preProcessBody(actionData);
        
        String localVarPath;
        // create path and map variables
        if (actionData.getEntityType() != null) {
            localVarPath = "/api/log/{actorId}/{action}".replaceAll("\\{format\\}","json");
        } else { 
            localVarPath = "/api/log/{actorId}/{action}/{entityType}/{entityId}".replaceAll("\\{format\\}","json")
                    .replaceAll("\\{" + "entityType" + "\\}", apiClient.escapeString(actionData.getEntityType()))
                    .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(actionData.getEntityId()));
        }
        localVarPath = localVarPath
                .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorData.getActorId()))
                .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(actionData.getAction()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        setDefaultParams(actorData, localVarQueryParams);

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);

        setDefaultHeaders(actionData, localVarPostBody, localVarHeaderParams);
        
        setProgressListener(progressListener);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    
    
    /* Build call for getHashableContentSimple */
    private <T> Call getHashableContentSimpleCall(T details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        ActionData<T> actionData = new ActionData<T>(details);
        
        String localVarPostBody = preProcessBody(actionData);
        
        // create path and map variables
        String localVarPath = "/api/getHashableContent".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);

        setDefaultHeaders(actionData, localVarPostBody, localVarHeaderParams);
        
        setProgressListener(progressListener);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private void setProgressListener(final ProgressResponseBody.ProgressListener progressListener) {
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
    }

    private <T> void setDefaultHeaders(ActionData<T> actionData, String localVarPostBody,
            Map<String, String> localVarHeaderParams) {
        
        if (actionData.getEntryType() != null)
        localVarHeaderParams.put("Audit-Log-Entry-Type", apiClient.parameterToString(actionData.getEntryType()));

        if (bodySigner != null) {
            localVarHeaderParams.put("Signature", bodySigner.computeSignature(localVarPostBody));
        }
    }

    private void setContentType(Map<String, String> localVarHeaderParams) {
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            contentType, "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    
    private <T> Call getHashableContentSimpleValidateBeforeCall(ActionData<T> actionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'details' is set
        if (actionData.getDetails() == null) {
            throw new ApiException("Missing the required parameter 'details' when calling getHashableContentSimple(Async)");
        }
        
        Call call = getHashableContentSimpleCall(actionData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the hash of a request without any additional metadata (including encrypted request bodies)
     * 
     * @param <T> the type of the action data details
     * @param details the action details (required)

     * @return String hash
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> String getHashableContentSimple(T details) throws ApiException {
        ApiResponse<String> resp = getHashableContentSimpleWithHttpInfo(new ActionData<T>(details));
        return resp.getData();
    }

    /**
     * Get the hash of a request without any additional metadata (including encrypted request bodies)
     * 
     * @param <T> the type of the action data details
     * 
     * @param details the action details (required)

     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> ApiResponse<String> getHashableContentSimpleWithHttpInfo(T details) throws ApiException {
        Call call = getHashableContentSimpleValidateBeforeCall(new ActionData<T>(details), null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the hash of a request without any additional metadata (including encrypted request bodies) (asynchronously)
     * 
     * @param <T> the type of the action data details
     * 
     * @param actionData the action data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public <T> Call getHashableContentSimpleAsync(ActionData<T> actionData, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = getHashableContentSimpleValidateBeforeCall(actionData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
        
    private <T> String preProcessBody(ActionData<T> actionData) {
    	if (actionData.getDetails() != null) {
    		return bodySerializer.serialize(actionData.getDetails());
    	} else {
    		return bodySerializer.serialize(actionData.getDiffDetails());
    	}
    	
    }

    private <T> Call getHashableContentValidateBeforeCall(ActorData actorData, ActionData<T> actionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorData.getActorId() == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling getHashableContent(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (actionData.getAction() == null) {
            throw new ApiException("Missing the required parameter 'action' when calling getHashableContent(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (actionData.getDetails() == null) {
            throw new ApiException("Missing the required parameter 'details' when calling getHashableContent(Async)");
        }
        
        Call call = getHashableContentCall(actorData, actionData, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Get the hash of a request for simple (minimial metadata) actions
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @return String hash
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> String getHashableContent(ActorData actorData, ActionData<T> actionData) throws ApiException {
        ApiResponse<String> resp = getHashableContentWithHttpInfo(actorData, actionData);
        return resp.getData();
    }

    /**
     * Get the hash of a request for simple (minimial metadata) actions
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> ApiResponse<String> getHashableContentWithHttpInfo(ActorData actorData, ActionData<T> actionData) throws ApiException {
        Call call = getHashableContentValidateBeforeCall(actorData, actionData, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the hash of a request for simple (minimial metadata) actions (asynchronously)
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public <T> Call getHashableContentAsync(ActorData actorData, ActionData<T> actionData, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = getHashableContentValidateBeforeCall(actorData, actionData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
