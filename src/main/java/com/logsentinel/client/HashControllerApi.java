/*
 * LogSentinel RESTful API
 * Read more at https://logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.client;

import com.logsentinel.ApiCallback;
import com.logsentinel.ApiClient;
import com.logsentinel.ApiException;
import com.logsentinel.ApiResponse;
import com.logsentinel.BodySerializer;
import com.logsentinel.Configuration;
import com.logsentinel.JsonBodySerializer;
import com.logsentinel.Pair;
import com.logsentinel.ProgressRequestBody;
import com.logsentinel.ProgressResponseBody;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HashControllerApi {
    private ApiClient apiClient;
    private BodySerializer bodySerializer;

    public HashControllerApi() {
        this(Configuration.getDefaultApiClient(), new JsonBodySerializer(Configuration.getDefaultApiClient().getJSON()));
    }

    public HashControllerApi(ApiClient apiClient, BodySerializer bodySerializer) {
        this.apiClient = apiClient;
        this.bodySerializer = bodySerializer;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getHashableContentForAuthAction */
    private com.squareup.okhttp.Call getHashableContentForAuthActionCall(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = details;
        
        // create path and map variables
        String localVarPath = "/api/getHashableContent/{actorId}/auth/{authAction}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorId.toString()))
        .replaceAll("\\{" + "authAction" + "\\}", apiClient.escapeString(authAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));
        if (actorDisplayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorDisplayName", actorDisplayName));
        if (actorRoles != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorRoles", actorRoles));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (signedLoginChallenge != null)
        localVarHeaderParams.put("Signed-Login-Challenge", apiClient.parameterToString(signedLoginChallenge));
        if (userPublicKey != null)
        localVarHeaderParams.put("User-Public-Key", apiClient.parameterToString(userPublicKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getHashableContentForAuthActionValidateBeforeCall(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorId == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling getHashableContentForAuthAction(Async)");
        }
        
        // verify the required parameter 'authAction' is set
        if (authAction == null) {
            throw new ApiException("Missing the required parameter 'authAction' when calling getHashableContentForAuthAction(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling getHashableContentForAuthAction(Async)");
        }
        
        com.squareup.okhttp.Call call = getHashableContentForAuthActionCall(actorId, authAction, details, userId, signedLoginChallenge, userPublicKey, actorDisplayName, actorRoles, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Get the hash of a request for auth actions
     * 
     * @param actorId actorId (required)
     * @param authAction authAction (required)
     * @param details details (required)

     * @param userId userId (optional)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getHashableContentForAuthAction(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles) throws ApiException {
        ApiResponse<String> resp = getHashableContentForAuthActionWithHttpInfo(actorId, authAction, details, userId, signedLoginChallenge, userPublicKey, actorDisplayName, actorRoles);
        return resp.getData();
    }

    /**
     * Get the hash of a request for auth actions
     * 
     * @param actorId actorId (required)
     * @param authAction authAction (required)
     * @param details details (required)

     * @param userId userId (optional)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getHashableContentForAuthActionWithHttpInfo(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles) throws ApiException {
        com.squareup.okhttp.Call call = getHashableContentForAuthActionValidateBeforeCall(actorId, authAction, details, userId, signedLoginChallenge, userPublicKey, actorDisplayName, actorRoles, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the hash of a request for auth actions (asynchronously)
     * 
     * @param actorId actorId (required)
     * @param authAction authAction (required)
     * @param details details (required)

     * @param userId userId (optional)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHashableContentForAuthActionAsync(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHashableContentForAuthActionValidateBeforeCall(actorId, authAction, details, userId, signedLoginChallenge, userPublicKey, actorDisplayName, actorRoles, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHashableContentForStandardAction */
    private com.squareup.okhttp.Call getHashableContentForStandardActionCall(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, List<String> actorRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = details;
        
        // create path and map variables
        String localVarPath = "/api/getHashableContent/{actorId}/{action}/{entityType}/{entityId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorId.toString()))
        .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(action.toString()))
        .replaceAll("\\{" + "entityType" + "\\}", apiClient.escapeString(entityType.toString()))
        .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorDisplayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorDisplayName", actorDisplayName));
        if (actorRoles != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorRoles", actorRoles));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getHashableContentForStandardActionValidateBeforeCall(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, List<String> actorRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorId == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling getHashableContentForStandardAction(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling getHashableContentForStandardAction(Async)");
        }
        
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling getHashableContentForStandardAction(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getHashableContentForStandardAction(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling getHashableContentForStandardAction(Async)");
        }
        
        com.squareup.okhttp.Call call = getHashableContentForStandardActionCall(actorId, action, entityType, entityId, details, actorDisplayName, actorRoles, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Get the hash of a request for standard actions
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param entityType entityType (required)
     * @param entityId entityId (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getHashableContentForStandardAction(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, List<String> actorRoles) throws ApiException {
        ApiResponse<String> resp = getHashableContentForStandardActionWithHttpInfo(actorId, action, entityType, entityId, details, actorDisplayName, actorRoles);
        return resp.getData();
    }

    /**
     * Get the hash of a request for standard actions
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param entityType entityType (required)
     * @param entityId entityId (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getHashableContentForStandardActionWithHttpInfo(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, List<String> actorRoles) throws ApiException {
        com.squareup.okhttp.Call call = getHashableContentForStandardActionValidateBeforeCall(actorId, action, entityType, entityId, details, actorDisplayName, actorRoles, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the hash of a request for standard actions (asynchronously)
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param entityType entityType (required)
     * @param entityId entityId (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHashableContentForStandardActionAsync(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, List<String> actorRoles, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHashableContentForStandardActionValidateBeforeCall(actorId, action, entityType, entityId, details, actorDisplayName, actorRoles, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHashableContentSimple */
    private com.squareup.okhttp.Call getHashableContentSimpleCall(Object details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = details;
        
        // create path and map variables
        String localVarPath = "/api/getHashableContent".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getHashableContentSimpleValidateBeforeCall(Object details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling getHashableContentSimple(Async)");
        }
        
        com.squareup.okhttp.Call call = getHashableContentSimpleCall(details, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the hash of a request without any additional metadata (including encrypted request bodies)
     * 
     * @param details details (required)

     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getHashableContentSimple(Object details) throws ApiException {
        ApiResponse<String> resp = getHashableContentSimpleWithHttpInfo(details);
        return resp.getData();
    }

    /**
     * Get the hash of a request without any additional metadata (including encrypted request bodies)
     * 
     * @param details details (required)

     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getHashableContentSimpleWithHttpInfo(Object details) throws ApiException {
        com.squareup.okhttp.Call call = getHashableContentSimpleValidateBeforeCall(details, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the hash of a request without any additional metadata (including encrypted request bodies) (asynchronously)
     * 
     * @param details details (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHashableContentSimpleAsync(Object details, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHashableContentSimpleValidateBeforeCall(details, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHashableContent */
    private com.squareup.okhttp.Call getHashableContentCall(String actorId, String action, Object details, String actorDisplayName, List<String> actorRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = preProcess(details);
        
        // create path and map variables
        String localVarPath = "/api/getHashableContent/{actorId}/{action}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorId.toString()))
        .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorDisplayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorDisplayName", actorDisplayName));
        if (actorRoles != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorRoles", actorRoles));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private Object preProcess(Object details) {
        return bodySerializer.serialize(details);
    }

    private com.squareup.okhttp.Call getHashableContentValidateBeforeCall(String actorId, String action, Object details, String actorDisplayName, List<String> actorRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorId == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling getHashableContent(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling getHashableContent(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling getHashableContent(Async)");
        }
        
        com.squareup.okhttp.Call call = getHashableContentCall(actorId, action, details, actorDisplayName, actorRoles, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Get the hash of a request for simple (minimial metadata) actions
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getHashableContent(String actorId, String action, Object details, String actorDisplayName, List<String> actorRoles) throws ApiException {
        ApiResponse<String> resp = getHashableContentWithHttpInfo(actorId, action, details, actorDisplayName, actorRoles);
        return resp.getData();
    }

    /**
     * Get the hash of a request for simple (minimial metadata) actions
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getHashableContentWithHttpInfo(String actorId, String action, Object details, String actorDisplayName, List<String> actorRoles) throws ApiException {
        com.squareup.okhttp.Call call = getHashableContentValidateBeforeCall(actorId, action, details, actorDisplayName, actorRoles, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the hash of a request for simple (minimial metadata) actions (asynchronously)
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHashableContentAsync(String actorId, String action, Object details, String actorDisplayName, List<String> actorRoles, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHashableContentValidateBeforeCall(actorId, action, details, actorDisplayName, actorRoles, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
