/*
 * LogSentinel RESTful API
 * Read more at https://logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.client;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import com.google.gson.reflect.TypeToken;
import com.logsentinel.*;
import com.logsentinel.client.model.ActionData;
import com.logsentinel.client.model.ActorData;
import com.logsentinel.client.model.AuditLogEntry;
import com.logsentinel.client.model.BatchLogRequestEntry;
import com.logsentinel.client.model.LogResponse;
import com.logsentinel.client.model.Verification;
import com.squareup.okhttp.Call;
import com.squareup.okhttp.Interceptor;
import com.squareup.okhttp.Response;

import static java.util.stream.Collectors.joining;

public class AuditLogControllerApi {
    private ApiClient apiClient;
    private BodySerializer bodySerializer;
    private BodySigner bodySigner;
    private JsonBodySerializer jsonBodySerializer;
    private String contentType;
    private KeywordsExtractor keywordsExtractor;
    
    public AuditLogControllerApi() {
        this(Configuration.getDefaultApiClient(),
                new JsonBodySerializer(Configuration.getDefaultApiClient().getJSON()),
                null,
                "application/json",
                new BasicKeywordExtractor());
    }

    public AuditLogControllerApi(ApiClient apiClient, BodySerializer bodySerializer,
                                 BodySigner bodySigner, String contentType, KeywordsExtractor keywordsExtractor) {
        this.apiClient = apiClient;
        this.bodySerializer = bodySerializer;
        this.bodySigner = bodySigner;
        this.contentType = contentType;
        this.jsonBodySerializer = new JsonBodySerializer(apiClient.getJSON());
        this.keywordsExtractor = keywordsExtractor;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for logAuthAction */
    private <T> Call logAuthActionCall(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        BodyAndKeywords bodyAndKeywords = preProcessBody(actionData);
        String localVarPostBody = bodyAndKeywords.getBody();
        List<String> keywords = bodyAndKeywords.getKeywords();
        
        // create path and map variables
        String localVarPath = "/api/log/{actorId}/auth/{authAction}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorData.getActorId()))
        .replaceAll("\\{" + "authAction" + "\\}", apiClient.escapeString(actionData.getAction()));

        List<Pair> localVarQueryParams = createQueryParams(actorData);
        localVarQueryParams.add(new Pair("keywords", keywords.stream().collect(joining(","))));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        signedLoginChallenge.ifPresent(param -> localVarHeaderParams.put("Signed-Login-Challenge", apiClient.parameterToString(signedLoginChallenge)));
        userPublicKey.ifPresent(param -> localVarHeaderParams.put("User-Public-Key", apiClient.parameterToString(param)));
        
        setDefaultHeaders(actionData, localVarPostBody, localVarHeaderParams);
        
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);
        
        setProgressListener(progressListener);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private <T> void setDefaultHeaders(ActionData<T> actionData, String localVarPostBody,
            Map<String, String> localVarHeaderParams) {
        
        if (actionData.getEntryType() != null) {
            localVarHeaderParams.put("Audit-Log-Entry-Type", apiClient.parameterToString(actionData.getEntryType()));
        }

        if (bodySigner != null) {
            localVarHeaderParams.put("Signature", bodySigner.computeSignature(localVarPostBody));
        }
    }

    private List<Pair> createQueryParams(ActorData actorData) {
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorData.getActorDisplayName() != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorDisplayName", actorData.getActorDisplayName()));
        if (actorData.getActorRoles() != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorRoles", actorData.getActorRoles()));
        return localVarQueryParams;
    }
    
    private <T> Call logAuthActionValidateBeforeCall(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        validateRequiredParams(actorData, actionData);
        
        Call call = logAuthActionCall(actorData, actionData, signedLoginChallenge, userPublicKey, progressListener, progressRequestListener);
        return call;
        
    }

    private <T> void validateRequiredParams(ActorData actorData, ActionData<T> actionData) throws ApiException {
        // verify the required parameter 'actorId' is set
        if (actorData.getActorId() == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling logAuthAction(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (actionData.getAction() == null) {
            throw new ApiException("Missing the required parameter 'action' when calling logAuthAction(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (actionData.getDetails() == null && actionData.getDiffDetails() == null) {
            throw new ApiException("Missing the required parameter 'details' or 'diffDetails' when calling logAuthAction(Async)");
        }
    }

    /**
     * Log an authentication event with the option to pass actor public key and signature
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @return LogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> LogResponse logAuthAction(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey) throws ApiException {
        ApiResponse<LogResponse> resp = logAuthActionWithHttpInfo(actorData, actionData, signedLoginChallenge, userPublicKey);
        return resp.getData();
    }

    /**
     * Log an authentication event with the option to pass actor public key and signature
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @return ApiResponse&lt;LogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> ApiResponse<LogResponse> logAuthActionWithHttpInfo(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey) throws ApiException {
        Call call = logAuthActionValidateBeforeCall(actorData, actionData, signedLoginChallenge, userPublicKey, null, null);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log an authentication event with the option to pass actor public key and signature (asynchronously)
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public <T> Call logAuthActionAsync(ActorData actorData, ActionData<T> actionData, Optional<String> signedLoginChallenge, Optional<String> userPublicKey, final ApiCallback<LogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = logAuthActionValidateBeforeCall(actorData, actionData, signedLoginChallenge, userPublicKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for logSimple */
    private <T> Call logSimpleCall(ActionData<T> actionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        BodyAndKeywords bodyAndKeywords = preProcessBody(actionData);
        String localVarPostBody = bodyAndKeywords.getBody();
        List<String> keywords = bodyAndKeywords.getKeywords();
        
        // create path and map variables
        String localVarPath = "/api/log/simple".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        localVarQueryParams.add(new Pair("keywords", keywords.stream().collect(joining(","))));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setDefaultHeaders(actionData, localVarPostBody, localVarHeaderParams);
        
        setContentType(localVarHeaderParams);
        
        setProgressListener(progressListener);

        if (bodySigner != null) {
            localVarHeaderParams.put("Signature", bodySigner.computeSignature(localVarPostBody));
        }
        
        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private void setContentType(Map<String, String> localVarHeaderParams) {
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            contentType, "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    
    private <T> Call logSimpleValidateBeforeCall(ActionData<T> actionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'details' is set
        if (actionData.getDetails() == null) {
            throw new ApiException("Missing the required parameter 'details' when calling logSimple(Async)");
        }
        
        Call call = logSimpleCall(actionData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted
     * 
     * @param <T> the type of the action data details
     * 
     * @param details the action details (required)
     * 
     * @return LogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> LogResponse logSimple(T details) throws ApiException {
        ApiResponse<LogResponse> resp = logSimpleWithHttpInfo(new ActionData<T>(details));
        return resp.getData();
    }

    /**
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted
     * 
     * @param <T> the type of the action data details
     * 
     * @param details the action details (required)

     * @return ApiResponse&lt;LogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> ApiResponse<LogResponse> logSimpleWithHttpInfo(T details) throws ApiException {
        Call call = logSimpleValidateBeforeCall(new ActionData<T>(details), null, null);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted (asynchronously)
     * 
     * @param <T> the type of the action data details
     * 
     * @param details the action details (required)
     * @param callback The callback to be executed when the API call finishes
     * 
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public <T> Call logSimpleAsync(T details, final ApiCallback<LogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = logSimpleValidateBeforeCall(new ActionData<T>(details), progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /* Build call for logStandardAction */
    private <T> Call logCall(ActorData actorData, ActionData<T> actionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        BodyAndKeywords bodyAndKeywords = preProcessBody(actionData);
        String localVarPostBody = bodyAndKeywords.getBody();
        List<String> keywords = bodyAndKeywords.getKeywords();
        
        String localVarPath;
        // create path and map variables
        if (actionData.getEntityType() == null) {
            localVarPath = "/api/log/{actorId}/{action}".replaceAll("\\{format\\}","json");
        } else { 
            localVarPath = "/api/log/{actorId}/{action}/{entityType}/{entityId}".replaceAll("\\{format\\}","json")
                    .replaceAll("\\{" + "entityType" + "\\}", apiClient.escapeString(actionData.getEntityType()))
                    .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(actionData.getEntityId()));
        }
        localVarPath = localVarPath
                .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorData.getActorId()))
                .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(actionData.getAction()));

        List<Pair> localVarQueryParams = createQueryParams(actorData);
        localVarQueryParams.add(new Pair("keywords", keywords.stream().collect(joining(","))));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);
        
        setDefaultHeaders(actionData, localVarPostBody, localVarHeaderParams);
        
        setProgressListener(progressListener);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private void setProgressListener(final ProgressResponseBody.ProgressListener progressListener) {
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new Interceptor() {
                @Override
                public Response intercept(Interceptor.Chain chain) throws IOException {
                    Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
    }
    
    private <T> Call logValidateBeforeCall(ActorData actorData, ActionData<T> actionData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorData.getActorId() == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling log(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (actionData.getAction() == null) {
            throw new ApiException("Missing the required parameter 'action' when calling log(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (actionData.getDetails() == null) {
            throw new ApiException("Missing the required parameter 'details' when calling log(Async)");
        }
        
        
        Call call = logCall(actorData, actionData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Log an event
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * 
     * @return LogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> LogResponse log(ActorData actorData, ActionData<T> actionData) throws ApiException {
        ApiResponse<LogResponse> resp = logWithHttpInfo(actorData, actionData);
        return resp.getData();
    }

    /**
     * Log an event
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @return ApiResponse&lt;LogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public <T> ApiResponse<LogResponse> logWithHttpInfo(ActorData actorData, ActionData<T> actionData) throws ApiException {
        Call call = logValidateBeforeCall(actorData, actionData, null, null);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log an event (asynchronously)
     * 
     * @param <T> the type of the action data details
     * 
     * @param actorData all actor-related parameters (required)
     * @param actionData all action-related parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * 
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public <T> Call logAsync(ActorData actorData, ActionData<T> actionData, final ApiCallback<LogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = logValidateBeforeCall(actorData, actionData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /* Build call for search */
    private Call searchCall(String query, Long startTime, Long endTime, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/search".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "query", query));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);

        setProgressListener(progressListener);
        
        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private Call searchValidateBeforeCall(String query, Long startTime, Long endTime, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling search(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling search(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling search(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling search(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling search(Async)");
        }
        
        Call call = searchCall(query, startTime, endTime, page, pageSize, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Search logged entries
     * 
     * @param query query (required)
     * @param startTime startTime (required)
     * @param endTime endTime (required)
     * @param page page (required)
     * @param pageSize pageSize (required)

     * @return List&lt;AuditLogEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuditLogEntry> search(String query, Long startTime, Long endTime, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<AuditLogEntry>> resp = searchWithHttpInfo(query, startTime, endTime, page, pageSize);
        return resp.getData();
    }

    /**
     * Search logged entries
     * 
     * @param query query (required)
     * @param startTime startTime (required)
     * @param endTime endTime (required)
     * @param page page (required)
     * @param pageSize pageSize (required)

     * @return ApiResponse&lt;List&lt;AuditLogEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuditLogEntry>> searchWithHttpInfo(String query, Long startTime, Long endTime, Integer page, Integer pageSize) throws ApiException {
        Call call = searchValidateBeforeCall(query, startTime, endTime, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<AuditLogEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search logged entries (asynchronously)
     * 
     * @param query query (required)
     * @param startTime startTime (required)
     * @param endTime endTime (required)
     * @param page page (required)
     * @param pageSize pageSize (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call searchAsync(String query, Long startTime, Long endTime, Integer page, Integer pageSize, final ApiCallback<List<AuditLogEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = searchValidateBeforeCall(query, startTime, endTime, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuditLogEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /* Build call for verify */
    private Call verifyCall(String hash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/verify".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (hash != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hash", hash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);

        setProgressListener(progressListener);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private Call verifyValidateBeforeCall(String hash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling verify(Async)");
        }
        
        Call call = verifyCall(hash, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Verify whether a given hash is present, indicating that the log is intact
     * 
     * @param hash hash (required)
     * @return Verification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Verification verify(String hash) throws ApiException {
        ApiResponse<Verification> resp = verifyWithHttpInfo(hash);
        return resp.getData();
    }

    /**
     * Verify whether a given hash is present, indicating that the log is intact
     * 
     * @param hash hash (required)
     * @return ApiResponse&lt;Verification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Verification> verifyWithHttpInfo(String hash) throws ApiException {
        Call call = verifyValidateBeforeCall(hash, null, null);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify whether a given hash is present, indicating that the log is intact (asynchronously)
     * 
     * @param hash hash (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call verifyAsync(String hash, final ApiCallback<Verification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = verifyValidateBeforeCall(hash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    /* Build call for verify */
    private Call logBatchCall(List<BatchLogRequestEntry> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jsonBodySerializer.serialize(request);
        
        // create path and map variables
        String localVarPath = "/api/log/batch".replaceAll("\\{format\\}","json");

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);
        // override content type as batch requests always need to supply JSON
        localVarHeaderParams.put("Content-Type", "application/json");

        setProgressListener(progressListener);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", new ArrayList<Pair>(), localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private Call logBatchValidateBeforeCall(List<BatchLogRequestEntry> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling logBatch(Async)");
        }
        
        Call call = logBatchCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Batch insert events
     * 
     * @param request the list of entries
     * @return LogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogResponse logBatch(List<BatchLogRequestEntry> request) throws ApiException {
        ApiResponse<LogResponse> resp = logBatchVerifyWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Batch insert events
     * 
     * @param request the list of entries
     * @return ApiResponse&lt;LogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogResponse> logBatchVerifyWithHttpInfo(List<BatchLogRequestEntry> request) throws ApiException {
        Call call = logBatchValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Batch insert events
     * 
     * @param request the list of entries
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call logBatchAsync(List<BatchLogRequestEntry> request, final ApiCallback<Verification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = logBatchValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    
    /* Build call for getEntityHistory */
    private Call getEntityHistoryCall(String entityId, String entityType,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/getEntityHistory".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entityId", entityId));
        if (entityType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "entityType", entityType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        setContentType(localVarHeaderParams);

        setProgressListener(progressListener);
        
        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private Call getEntityHistoryValidateBeforeCall(String entityId, String entityType,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling search(Async)");
        }
        
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling search(Async)");
        }
        
        Call call = getEntityHistoryCall(entityId, entityType, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Get all entries for a given entity
     * 
     * @param entityId entityId (required)
     * @param entityType entityType (required)
     * 
     * @return List&lt;AuditLogEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuditLogEntry> getEntityHistory(String entityId, String entityType) throws ApiException {
        ApiResponse<List<AuditLogEntry>> resp = getEntityHistoryWithHttpInfo(entityId, entityType);
        return resp.getData();
    }

    /**
     * Get all entries for a given entity
     * 
     * @param entityId entityId (required)
     * @param entityType entityType (required)
     * 
     * @return ApiResponse&lt;List&lt;AuditLogEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuditLogEntry>> getEntityHistoryWithHttpInfo(String entityId, String entityType) throws ApiException {
        Call call = getEntityHistoryValidateBeforeCall(entityId, entityType, null, null);
        Type localVarReturnType = new TypeToken<List<AuditLogEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all entries for a given entity (asynchronously)
     * 
     * @param entityId entityId (required)
     * @param entityType entityType (required)
     * @param callback The callback to be executed when the API call finishes
     * 
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public Call getEntityHistoryAsync(String entityId, String entityType, final ApiCallback<List<AuditLogEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = getEntityHistoryValidateBeforeCall(entityId, entityType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuditLogEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    private <T> BodyAndKeywords preProcessBody(ActionData<T> actionData) {
    	if (actionData.getDetails() != null) {
            BodyAndKeywords bodyAndKeywords =
                    new BodyAndKeywords(bodySerializer.serialize(actionData.getDetails()),
                                        keywordsExtractor.extract(actionData.getDetails()));
    		return bodyAndKeywords;
    	} else {
            BodyAndKeywords bodyAndKeywords =
                    new BodyAndKeywords(bodySerializer.serialize(actionData.getDiffDetails()),
                                        keywordsExtractor.extract(actionData.getDiffDetails()));
    		return bodyAndKeywords;
    	}
    	
    }
}
