/*
 * LogSentinel RESTful API
 * Read more at https://logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.client;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.logsentinel.ApiCallback;
import com.logsentinel.ApiClient;
import com.logsentinel.ApiException;
import com.logsentinel.ApiResponse;
import com.logsentinel.BodySerializer;
import com.logsentinel.BodySigner;
import com.logsentinel.Configuration;
import com.logsentinel.JsonBodySerializer;
import com.logsentinel.Pair;
import com.logsentinel.ProgressRequestBody;
import com.logsentinel.ProgressResponseBody;
import com.logsentinel.client.model.AuditLogEntry;
import com.logsentinel.client.model.LogResponse;
import com.logsentinel.client.model.Verification;

public class AuditLogControllerApi {
    private ApiClient apiClient;
    private BodySerializer bodySerializer;
    private BodySigner bodySigner;
    
    public AuditLogControllerApi() {
        this(Configuration.getDefaultApiClient(), new JsonBodySerializer(Configuration.getDefaultApiClient().getJSON()), null);
    }

    public AuditLogControllerApi(ApiClient apiClient, BodySerializer bodySerializer, BodySigner bodySigner) {
        this.apiClient = apiClient;
        this.bodySerializer = bodySerializer;
        this.bodySigner = bodySigner;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for logAuthAction */
    private com.squareup.okhttp.Call logAuthActionCall(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        String localVarPostBody = preProcessBody(details);
        
        // create path and map variables
        String localVarPath = "/api/log/{actorId}/auth/{authAction}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorId.toString()))
        .replaceAll("\\{" + "authAction" + "\\}", apiClient.escapeString(authAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));
        if (actorDisplayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorDisplayName", actorDisplayName));
        if (actorRoles != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorRoles", actorRoles));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (signedLoginChallenge != null)
        localVarHeaderParams.put("Signed-Login-Challenge", apiClient.parameterToString(signedLoginChallenge));
        if (userPublicKey != null)
        localVarHeaderParams.put("User-Public-Key", apiClient.parameterToString(userPublicKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        
        if (bodySigner != null) {
            localVarHeaderParams.put("Signature", bodySigner.computeSignature(localVarPostBody));
        }

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call logAuthActionValidateBeforeCall(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorId == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling logAuthAction(Async)");
        }
        
        // verify the required parameter 'authAction' is set
        if (authAction == null) {
            throw new ApiException("Missing the required parameter 'authAction' when calling logAuthAction(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling logAuthAction(Async)");
        }
        
        com.squareup.okhttp.Call call = logAuthActionCall(actorId, authAction, details, userId, signedLoginChallenge, userPublicKey, actorDisplayName, actorRoles, progressListener, progressRequestListener);
        return call;
        
    }

    /**
     * Log an authentication event with the option to pass actor public key and signature
     * 
     * @param actorId actorId (required)
     * @param authAction authAction (required)
     * @param details details (required)
     * @param userId userId (optional)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return LogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogResponse logAuthAction(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles) throws ApiException {
        ApiResponse<LogResponse> resp = logAuthActionWithHttpInfo(actorId, authAction, details, userId, signedLoginChallenge, userPublicKey, actorDisplayName, actorRoles);
        return resp.getData();
    }

    /**
     * Log an authentication event with the option to pass actor public key and signature
     * 
     * @param actorId actorId (required)
     * @param authAction authAction (required)
     * @param details details (required)

     * @param userId userId (optional)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return ApiResponse&lt;LogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogResponse> logAuthActionWithHttpInfo(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRole) throws ApiException {
        com.squareup.okhttp.Call call = logAuthActionValidateBeforeCall(actorId, authAction, details, userId, signedLoginChallenge, userPublicKey, actorDisplayName, actorRole, null, null);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log an authentication event with the option to pass actor public key and signature (asynchronously)
     * 
     * @param actorId actorId (required)
     * @param authAction authAction (required)
     * @param details details (required)

     * @param userId userId (optional)
     * @param signedLoginChallenge Signed-Login-Challenge (optional)
     * @param userPublicKey User-Public-Key (optional)
     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logAuthActionAsync(String actorId, String authAction, Object details, String userId, String signedLoginChallenge, String userPublicKey, String actorDisplayName, List<String> actorRoles, final ApiCallback<LogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logAuthActionValidateBeforeCall(actorId, authAction, details, userId, signedLoginChallenge, userPublicKey, actorDisplayName, actorRoles, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for logSimple */
    private com.squareup.okhttp.Call logSimpleCall(Object details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        String localVarPostBody = preProcessBody(details);
        
        // create path and map variables
        String localVarPath = "/api/log/simple".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        if (bodySigner != null) {
            localVarHeaderParams.put("Signature", bodySigner.computeSignature(localVarPostBody));
        }
        
        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call logSimpleValidateBeforeCall(Object details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling logSimple(Async)");
        }
        
        com.squareup.okhttp.Call call = logSimpleCall(details, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted
     * 
     * @param details details (required)
     * @return LogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogResponse logSimple(Object details) throws ApiException {
        ApiResponse<LogResponse> resp = logSimpleWithHttpInfo(details);
        return resp.getData();
    }

    /**
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted
     * 
     * @param details details (required)

     * @return ApiResponse&lt;LogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogResponse> logSimpleWithHttpInfo(Object details) throws ApiException {
        com.squareup.okhttp.Call call = logSimpleValidateBeforeCall(details, null, null);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted (asynchronously)
     * 
     * @param details details (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logSimpleAsync(Object details, final ApiCallback<LogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logSimpleValidateBeforeCall(details, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for logStandardAction */
    private com.squareup.okhttp.Call logStandardActionCall(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, String actorRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        String localVarPostBody = preProcessBody(details);
        
        // create path and map variables
        String localVarPath = "/api/log/{actorId}/{action}/{entityType}/{entityId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorId.toString()))
        .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(action.toString()))
        .replaceAll("\\{" + "entityType" + "\\}", apiClient.escapeString(entityType.toString()))
        .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorDisplayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorDisplayName", actorDisplayName));
        if (actorRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorRole", actorRole));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (bodySigner != null) {
            localVarHeaderParams.put("Signature", bodySigner.computeSignature(localVarPostBody));
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call logStandardActionValidateBeforeCall(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, String actorRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorId == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling logStandardAction(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling logStandardAction(Async)");
        }
        
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling logStandardAction(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling logStandardAction(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling logStandardAction(Async)");
        }
        
        com.squareup.okhttp.Call call = logStandardActionCall(actorId, action, entityType, entityId, details, actorDisplayName, actorRole, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Log an event by providing full details
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param entityType entityType (required)
     * @param entityId entityId (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return LogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogResponse logStandardAction(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, String actorRole) throws ApiException {
        ApiResponse<LogResponse> resp = logStandardActionWithHttpInfo(actorId, action, entityType, entityId, details, actorDisplayName, actorRole);
        return resp.getData();
    }

    /**
     * Log an event by providing full details
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param entityType entityType (required)
     * @param entityId entityId (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return ApiResponse&lt;LogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogResponse> logStandardActionWithHttpInfo(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, String actorRole) throws ApiException {
        com.squareup.okhttp.Call call = logStandardActionValidateBeforeCall(actorId, action, entityType, entityId, details, actorDisplayName, actorRole, null, null);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log an event by providing full details (asynchronously)
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param entityType entityType (required)
     * @param entityId entityId (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logStandardActionAsync(String actorId, String action, String entityType, String entityId, Object details, String actorDisplayName, String actorRole, final ApiCallback<LogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logStandardActionValidateBeforeCall(actorId, action, entityType, entityId, details, actorDisplayName, actorRole, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for log */
    private com.squareup.okhttp.Call logCall(String actorId, String action, Object details, String actorDisplayName, String actorRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        String localVarPostBody = preProcessBody(details);
        
        // create path and map variables
        String localVarPath = "/api/log/{actorId}/{action}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "actorId" + "\\}", apiClient.escapeString(actorId.toString()))
        .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorDisplayName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorDisplayName", actorDisplayName));
        if (actorRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorRole", actorRole));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (bodySigner != null) {
            localVarHeaderParams.put("Signature", bodySigner.computeSignature(localVarPostBody));
        }
        
        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call logValidateBeforeCall(String actorId, String action, Object details, String actorDisplayName, String actorRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actorId' is set
        if (actorId == null) {
            throw new ApiException("Missing the required parameter 'actorId' when calling log(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling log(Async)");
        }
        
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling log(Async)");
        }
        
        
        com.squareup.okhttp.Call call = logCall(actorId, action, details, actorDisplayName, actorRole, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Log an event by a given actor
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return LogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogResponse log(String actorId, String action, Object details, String actorDisplayName, String actorRole) throws ApiException {
        ApiResponse<LogResponse> resp = logWithHttpInfo(actorId, action, details, actorDisplayName, actorRole);
        return resp.getData();
    }

    /**
     * Log an event by a given actor
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param details details (required)


     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @return ApiResponse&lt;LogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogResponse> logWithHttpInfo(String actorId, String action, Object details, String actorDisplayName, String actorRole) throws ApiException {
        com.squareup.okhttp.Call call = logValidateBeforeCall(actorId, action, details, actorDisplayName, actorRole, null, null);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Log an event by a given actor (asynchronously)
     * 
     * @param actorId actorId (required)
     * @param action action (required)
     * @param details details (required)

     * @param actorDisplayName actorDisplayName (optional)
     * @param actorRole actorRole (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logAsync(String actorId, String action, Object details, String actorDisplayName, String actorRole, final ApiCallback<LogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logValidateBeforeCall(actorId, action, details, actorDisplayName, actorRole, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for search */
    private com.squareup.okhttp.Call searchCall(String query, Long startTime, Long endTime, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/search".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "query", query));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call searchValidateBeforeCall(String query, Long startTime, Long endTime, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling search(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling search(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling search(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling search(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling search(Async)");
        }
        
        com.squareup.okhttp.Call call = searchCall(query, startTime, endTime, page, pageSize, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Search logged entries
     * 
     * @param query query (required)
     * @param startTime startTime (required)
     * @param endTime endTime (required)
     * @param page page (required)
     * @param pageSize pageSize (required)

     * @return List&lt;AuditLogEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuditLogEntry> search(String query, Long startTime, Long endTime, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<AuditLogEntry>> resp = searchWithHttpInfo(query, startTime, endTime, page, pageSize);
        return resp.getData();
    }

    /**
     * Search logged entries
     * 
     * @param query query (required)
     * @param startTime startTime (required)
     * @param endTime endTime (required)
     * @param page page (required)
     * @param pageSize pageSize (required)

     * @return ApiResponse&lt;List&lt;AuditLogEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuditLogEntry>> searchWithHttpInfo(String query, Long startTime, Long endTime, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(query, startTime, endTime, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<AuditLogEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search logged entries (asynchronously)
     * 
     * @param query query (required)
     * @param startTime startTime (required)
     * @param endTime endTime (required)
     * @param page page (required)
     * @param pageSize pageSize (required)

     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(String query, Long startTime, Long endTime, Integer page, Integer pageSize, final ApiCallback<List<AuditLogEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(query, startTime, endTime, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuditLogEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for verify */
    private com.squareup.okhttp.Call verifyCall(String hash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/verify".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (hash != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "hash", hash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call verifyValidateBeforeCall(String hash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling verify(Async)");
        }
        
        com.squareup.okhttp.Call call = verifyCall(hash, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Verify whether a given hash is present, indicating that the log is intact
     * 
     * @param hash hash (required)
     * @return Verification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Verification verify(String hash) throws ApiException {
        ApiResponse<Verification> resp = verifyWithHttpInfo(hash);
        return resp.getData();
    }

    /**
     * Verify whether a given hash is present, indicating that the log is intact
     * 
     * @param hash hash (required)
     * @return ApiResponse&lt;Verification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Verification> verifyWithHttpInfo(String hash) throws ApiException {
        com.squareup.okhttp.Call call = verifyValidateBeforeCall(hash, null, null);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify whether a given hash is present, indicating that the log is intact (asynchronously)
     * 
     * @param hash hash (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyAsync(String hash, final ApiCallback<Verification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyValidateBeforeCall(hash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Verification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
    private String preProcessBody(Object details) {
        return bodySerializer.serialize(details);
    }
}
