/*
 * LogSentinel RESTful API
 * Read more at https://logsentinel.com/documentation/
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.client;

import com.google.gson.reflect.TypeToken;
import com.logsentinel.*;
import com.logsentinel.client.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiVerificationControllerApi {
    private ApiClient apiClient;

    public ApiVerificationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiVerificationControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getConsistencyProofUsingGET
     * @param firstTreeHash firstTreeHash (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param secondTreeHash secondTreeHash (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsistencyProofUsingGETCall(String firstTreeHash, String applicationId, String secondTreeHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/verification/merkle/proofs/consistency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (firstTreeHash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("firstTreeHash", firstTreeHash));
        if (secondTreeHash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("secondTreeHash", secondTreeHash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (applicationId != null)
        localVarHeaderParams.put("Application-Id", apiClient.parameterToString(applicationId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsistencyProofUsingGETValidateBeforeCall(String firstTreeHash, String applicationId, String secondTreeHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'firstTreeHash' is set
        if (firstTreeHash == null) {
            throw new ApiException("Missing the required parameter 'firstTreeHash' when calling getConsistencyProofUsingGET(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getConsistencyProofUsingGET(Async)");
        }


        com.squareup.okhttp.Call call = getConsistencyProofUsingGETCall(firstTreeHash, applicationId, secondTreeHash, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get consistency proof for an application merkle tree. Async operation, as the generation may be slow
     *
     * @param firstTreeHash firstTreeHash (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param secondTreeHash secondTreeHash (optional, default to -1)
     * @return ConsistencyProof
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsistencyProof getConsistencyProofUsingGET(String firstTreeHash, String applicationId, String secondTreeHash) throws ApiException {
        ApiResponse<ConsistencyProof> resp = getConsistencyProofUsingGETWithHttpInfo(firstTreeHash, applicationId, secondTreeHash);
        return resp.getData();
    }

    /**
     * Get consistency proof for an application merkle tree. Async operation, as the generation may be slow
     *
     * @param firstTreeHash firstTreeHash (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param secondTreeHash secondTreeHash (optional, default to -1)
     * @return ApiResponse&lt;ConsistencyProof&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsistencyProof> getConsistencyProofUsingGETWithHttpInfo(String firstTreeHash, String applicationId, String secondTreeHash) throws ApiException {
        com.squareup.okhttp.Call call = getConsistencyProofUsingGETValidateBeforeCall(firstTreeHash, applicationId, secondTreeHash, null, null);
        Type localVarReturnType = new TypeToken<ConsistencyProof>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get consistency proof for an application merkle tree. Async operation, as the generation may be slow (asynchronously)
     *
     * @param firstTreeHash firstTreeHash (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param secondTreeHash secondTreeHash (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsistencyProofUsingGETAsync(String firstTreeHash, String applicationId, String secondTreeHash, final ApiCallback<ConsistencyProof> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsistencyProofUsingGETValidateBeforeCall(firstTreeHash, applicationId, secondTreeHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsistencyProof>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEntriesBetweenHashesUsingGET
     * @param startHash startHash (required)
     * @param endHash endHash (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEntriesBetweenHashesUsingGETCall(String startHash, String endHash, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/verification/entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startHash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startHash", startHash));
        if (endHash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endHash", endHash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (applicationId != null)
        localVarHeaderParams.put("Application-Id", apiClient.parameterToString(applicationId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntriesBetweenHashesUsingGETValidateBeforeCall(String startHash, String endHash, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'startHash' is set
        if (startHash == null) {
            throw new ApiException("Missing the required parameter 'startHash' when calling getEntriesBetweenHashesUsingGET(Async)");
        }

        // verify the required parameter 'endHash' is set
        if (endHash == null) {
            throw new ApiException("Missing the required parameter 'endHash' when calling getEntriesBetweenHashesUsingGET(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getEntriesBetweenHashesUsingGET(Async)");
        }


        com.squareup.okhttp.Call call = getEntriesBetweenHashesUsingGETCall(startHash, endHash, applicationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all entries between two hashes
     *
     * @param startHash startHash (required)
     * @param endHash endHash (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @return List&lt;AuditLogEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuditLogEntry> getEntriesBetweenHashesUsingGET(String startHash, String endHash, String applicationId) throws ApiException {
        ApiResponse<List<AuditLogEntry>> resp = getEntriesBetweenHashesUsingGETWithHttpInfo(startHash, endHash, applicationId);
        return resp.getData();
    }

    /**
     * Get all entries between two hashes
     *
     * @param startHash startHash (required)
     * @param endHash endHash (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @return ApiResponse&lt;List&lt;AuditLogEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuditLogEntry>> getEntriesBetweenHashesUsingGETWithHttpInfo(String startHash, String endHash, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = getEntriesBetweenHashesUsingGETValidateBeforeCall(startHash, endHash, applicationId, null, null);
        Type localVarReturnType = new TypeToken<List<AuditLogEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all entries between two hashes (asynchronously)
     *
     * @param startHash startHash (required)
     * @param endHash endHash (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntriesBetweenHashesUsingGETAsync(String startHash, String endHash, String applicationId, final ApiCallback<List<AuditLogEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntriesBetweenHashesUsingGETValidateBeforeCall(startHash, endHash, applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuditLogEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInclusionProofUsingGET
     * @param hash Hash of the entry to verify (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInclusionProofUsingGETCall(String hash, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/verification/merkle/proofs/inclusion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hash", hash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (applicationId != null)
        localVarHeaderParams.put("Application-Id", apiClient.parameterToString(applicationId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInclusionProofUsingGETValidateBeforeCall(String hash, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling getInclusionProofUsingGET(Async)");
        }

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getInclusionProofUsingGET(Async)");
        }


        com.squareup.okhttp.Call call = getInclusionProofUsingGETCall(hash, applicationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow
     *
     * @param hash Hash of the entry to verify (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @return InclusionProof
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InclusionProof getInclusionProofUsingGET(String hash, String applicationId) throws ApiException {
        ApiResponse<InclusionProof> resp = getInclusionProofUsingGETWithHttpInfo(hash, applicationId);
        return resp.getData();
    }

    /**
     * Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow
     *
     * @param hash Hash of the entry to verify (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @return ApiResponse&lt;InclusionProof&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InclusionProof> getInclusionProofUsingGETWithHttpInfo(String hash, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = getInclusionProofUsingGETValidateBeforeCall(hash, applicationId, null, null);
        Type localVarReturnType = new TypeToken<InclusionProof>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get inclusion proof for the application merkle tree. Async operation, as the generation may be slow (asynchronously)
     *
     * @param hash Hash of the entry to verify (required)
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInclusionProofUsingGETAsync(String hash, String applicationId, final ApiCallback<InclusionProof> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInclusionProofUsingGETValidateBeforeCall(hash, applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InclusionProof>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLatestTreeHeadUsingGET
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLatestTreeHeadUsingGETCall(String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/verification/merkle/latestTreeHead";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (applicationId != null)
        localVarHeaderParams.put("Application-Id", apiClient.parameterToString(applicationId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLatestTreeHeadUsingGETValidateBeforeCall(String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getLatestTreeHeadUsingGET(Async)");
        }


        com.squareup.okhttp.Call call = getLatestTreeHeadUsingGETCall(applicationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get latest tree head of the application merkle tree. Async operation, as the operation may be slow
     *
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @return TreeHead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TreeHead getLatestTreeHeadUsingGET(String applicationId) throws ApiException {
        ApiResponse<TreeHead> resp = getLatestTreeHeadUsingGETWithHttpInfo(applicationId);
        return resp.getData();
    }

    /**
     * Get latest tree head of the application merkle tree. Async operation, as the operation may be slow
     *
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @return ApiResponse&lt;TreeHead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TreeHead> getLatestTreeHeadUsingGETWithHttpInfo(String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = getLatestTreeHeadUsingGETValidateBeforeCall(applicationId, null, null);
        Type localVarReturnType = new TypeToken<TreeHead>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get latest tree head of the application merkle tree. Async operation, as the operation may be slow (asynchronously)
     *
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLatestTreeHeadUsingGETAsync(String applicationId, final ApiCallback<TreeHead> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLatestTreeHeadUsingGETValidateBeforeCall(applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TreeHead>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMerkleTreeInfoUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMerkleTreeInfoUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/verification/merkle/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMerkleTreeInfoUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = getMerkleTreeInfoUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get general info about merkle tree parameters
     *
     * @return TreeHead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogInfo getMerkleTreeInfoUsingGET() throws ApiException {
        ApiResponse<LogInfo> resp = getMerkleTreeInfoUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get general info about merkle tree parameters
     *
     * @return ApiResponse&lt;TreeHead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogInfo> getMerkleTreeInfoUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getMerkleTreeInfoUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LogInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get general info about merkle tree parameters (asynchronously)
     *
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMerkleTreeInfoUsingGETAsync(final ApiCallback<TreeHead> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMerkleTreeInfoUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TreeHead>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResolvedVerificationFailuresUsingGET
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResolvedVerificationFailuresUsingGETCall(String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/verification/resolved-failures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (applicationId != null)
        localVarHeaderParams.put("Application-Id", apiClient.parameterToString(applicationId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResolvedVerificationFailuresUsingGETValidateBeforeCall(String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling getResolvedVerificationFailuresUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getResolvedVerificationFailuresUsingGETCall(applicationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all resolved verification failures
     * 
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @return CollectionOfResolvedVerificationFailureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionOfResolvedVerificationFailureResponse getResolvedVerificationFailuresUsingGET(String applicationId) throws ApiException {
        ApiResponse<CollectionOfResolvedVerificationFailureResponse> resp = getResolvedVerificationFailuresUsingGETWithHttpInfo(applicationId);
        return resp.getData();
    }

    /**
     * Get all resolved verification failures
     * 
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @return ApiResponse&lt;CollectionOfResolvedVerificationFailureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionOfResolvedVerificationFailureResponse> getResolvedVerificationFailuresUsingGETWithHttpInfo(String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = getResolvedVerificationFailuresUsingGETValidateBeforeCall(applicationId, null, null);
        Type localVarReturnType = new TypeToken<CollectionOfResolvedVerificationFailureResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all resolved verification failures (asynchronously)
     * 
     * @param applicationId Application ID, identifying a target application (obtained from the API credentials page) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResolvedVerificationFailuresUsingGETAsync(String applicationId, final ApiCallback<CollectionOfResolvedVerificationFailureResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResolvedVerificationFailuresUsingGETValidateBeforeCall(applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionOfResolvedVerificationFailureResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
